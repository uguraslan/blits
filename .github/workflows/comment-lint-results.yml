name: Comment ESLint Results

on:
  workflow_run:
    workflows: ["Run ESLint"]
    types:
      - completed

jobs:
  comment:
    # Only run this job if the previous workflow failed (indicating lint errors)
    if: github.event.workflow_run.conclusion == 'failure'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
    - name: Download Lint Results
      id: download
      uses: actions/github-script@v6
      with:
        script: |
          const core = require('@actions/core');

          try {
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }}
            });

            const matchArtifact = artifacts.data.artifacts.find(artifact => artifact.name === "lint-results");
            if (!matchArtifact) {
              core.setFailed('No lint results artifact found');
              return false;
            }

            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip'
            });

            const fs = require('fs');
            try {
              fs.writeFileSync('lint-results.zip', Buffer.from(download.data));
              return true;
            } catch (error) {
              core.setFailed(`Failed to write artifact: ${error.message}`);
              return false;
            }
          } catch (error) {
            core.setFailed(`Failed to download artifact: ${error.message}`);
            return false;
          }
        result-encoding: string

    - name: Extract Lint Results
      if: steps.download.outputs.result == 'true'
      id: extract
      run: |
        mkdir -p lint-results
        unzip -o lint-results.zip -d lint-results

        if [ -f lint-results/errors.md ]; then
          # Use GitHub's EOF syntax for multiline content
          echo "LINT_ERRORS<<EOF" >> $GITHUB_ENV
          cat lint-results/errors.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "HAS_ERRORS=true" >> $GITHUB_OUTPUT
        else
          echo "HAS_ERRORS=false" >> $GITHUB_OUTPUT
        fi

    - name: Find PR Number
      if: steps.extract.outputs.HAS_ERRORS == 'true'
      id: find-pr
      uses: actions/github-script@v6
      with:
        script: |
          const core = require('@actions/core');

          try {
            const { owner, repo } = context.repo;
            const run_id = ${{ github.event.workflow_run.id }};

            // Get the triggering workflow run
            const run = await github.rest.actions.getWorkflowRun({
              owner,
              repo,
              run_id
            });

            // Find associated PR - first try the event payload
            if (run.data.pull_requests && run.data.pull_requests.length > 0) {
              return run.data.pull_requests[0].number;
            }

            // Fallback to searching by head SHA
            const pulls = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
              head: run.data.head_sha
            });

            if (pulls.data.length > 0) {
              return pulls.data[0].number;
            }

            core.info('No PR found for this workflow run');
            return null;
          } catch (error) {
            core.setFailed(`Failed to find PR: ${error.message}`);
            return null;
          }
        result-encoding: string

    - name: Post Lint Results as PR Comment
      if: steps.find-pr.outputs.result != 'null'
      uses: actions/github-script@v6
      with:
        script: |
          const core = require('@actions/core');

          try {
            const pr_number = parseInt(${{ steps.find-pr.outputs.result }});

            if (isNaN(pr_number)) {
              core.warning('Invalid PR number');
              return;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              body: process.env.LINT_ERRORS
            });

            core.info(`Posted lint errors comment to PR #${pr_number}`);
          } catch (error) {
            core.setFailed(`Failed to post comment: ${error.message}`);
          }