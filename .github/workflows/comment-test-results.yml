name: Comment Test Results

on:
  workflow_run:
    workflows: ["Run Blits Tests"]
    types: [completed]

jobs:
  comment-test-results:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Download Test Results
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }}
            });
            const art = artifacts.data.artifacts.find(a => a.name === "test-results");
            if (!art) core.setFailed('No test-results artifact found');
            const dl = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: art.id,
              archive_format: 'zip'
            });
            require('fs').writeFileSync('test-results.zip', Buffer.from(dl.data));
      - name: Extract Test Results
        run: |
          mkdir -p test-results
          unzip -o test-results.zip -d test-results
          echo "TIMESTAMP=$(cat test-results/timestamp.txt)" >> $GITHUB_ENV
          echo "SUMMARY=$(cat test-results/summary.txt)" >> $GITHUB_ENV
          echo "FAILED=$(cat test-results/failed.txt)" >> $GITHUB_ENV
          if [ -f test-results/error.txt ]; then cp test-results/error.txt raw_error.txt; fi

      - name: Post Test Results as PR Comment
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            try {
              const pulls = context.payload.workflow_run.pull_requests;
              console.log(`Found ${pulls.length} triggering PR(s).`);

              if (pulls.length === 0) {
                console.warn('No pull requests found for this workflow run; skipping comment.');
                return;
              }

              const status = process.env.FAILED === 'true' ? '‚ùå FAILED' : '‚úÖ PASSED';
              let commentBody = `#### Test Results: ${status}\n`
                              + `**Run at:** ${process.env.TIMESTAMP}\n\n`
                              + `**Summary:**\n${process.env.SUMMARY}`;

              if (fs.existsSync('raw_error.txt')) {
                commentBody += '\n\n**Error Output:**\n```\n'
                             + fs.readFileSync('raw_error.txt', 'utf8')
                             + '\n```';
              }

              for (const pr of pulls) {
                console.log(`Commenting on PR #${pr.number}`);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo:  context.repo.repo,
                  issue_number: pr.number,
                  body: commentBody
                });
              }

            } catch (err) {
              console.error('üõë Failed to post test results comment:', err);
              core.setFailed(`Comment step failed: ${err.message}`);
            }
